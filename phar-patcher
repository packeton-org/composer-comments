#!/usr/bin/env php
<?php

/*
 * This file is part of PHAR Utils.
 *
 * (c) Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
class PharPatcher
{
    private $contents;

    /**
     * @param string $file path to the phar file to use
     */
    public function __construct(string $file)
    {
        $this->contents = file_get_contents($file);
    }

    /**
     * Inject php script to phar.
     *
     * @param string $script
     * @return void
     */
    public function injectScript(string $script): void
    {
        if (!preg_match('#<\?php\r?\n?#', $this->contents, $match, PREG_OFFSET_CAPTURE)) {
            throw new \RuntimeException('Could not detect the stub\'s end in the phar');
        }
        $pos = $match[0][1] + strlen($match[0][0]);
        $s1 = substr($this->contents, 0, $pos);
        $s2 = substr($this->contents, $pos);

        $this->contents = $s1 . $script . $s2;
    }

    /**
     * Saves the updated phar file, optionally with an updated signature.
     *
     * @param  string $path
     * @param  int $signatureAlgo One of Phar::MD5, Phar::SHA1, Phar::SHA256 or Phar::SHA512
     * @return bool
     */
    public function save(string $path, $signatureAlgo = \Phar::SHA512): bool
    {
        $pos = $this->determineSignatureBegin();

        $algos = [
            \Phar::MD5 => 'md5',
            \Phar::SHA1 => 'sha1',
            \Phar::SHA256 => 'sha256',
            \Phar::SHA512 => 'sha512',
        ];

        if (!isset($algos[$signatureAlgo])) {
            throw new \UnexpectedValueException('Invalid hash algorithm given: '.$signatureAlgo.' expected one of Phar::MD5, Phar::SHA1, Phar::SHA256 or Phar::SHA512');
        }
        $algo = $algos[$signatureAlgo];

        // re-sign phar
        //           signature
        $signature = hash($algo, substr($this->contents, 0, $pos), true)
            // sig type
            . pack('L', $signatureAlgo)
            // ohai Greg & Marcus
            . 'GBMB';

        $this->contents = substr($this->contents, 0, $pos) . $signature;

        return file_put_contents($path, $this->contents);
    }

    private function readUint($pos, $bytes)
    {
        $res = unpack('V', substr($this->contents, $pos, $bytes));

        return $res[1];
    }

    /**
     * Determine the beginning of the signature.
     *
     * @return int
     */
    private function determineSignatureBegin(): int
    {
        // detect signature position
        if (!preg_match('{__HALT_COMPILER\(\);(?: +\?>)?\r?\n}', $this->contents, $match, PREG_OFFSET_CAPTURE)) {
            throw new \RuntimeException('Could not detect the stub\'s end in the phar');
        }

        // set starting position and skip past manifest length
        $pos = $match[0][1] + strlen($match[0][0]);
        $manifestEnd = $pos + 4 + $this->readUint($pos, 4);

        $pos += 4;
        $numFiles = $this->readUint($pos, 4);

        $pos += 4;

        // skip API version (YOLO)
        $pos += 2;

        // skip PHAR flags
        $pos += 4;

        $aliasLength = $this->readUint($pos, 4);
        $pos += 4 + $aliasLength;

        $metadataLength = $this->readUint($pos, 4);
        $pos += 4 + $metadataLength;

        $compressedSizes = 0;
        while (($numFiles > 0) && ($pos < $manifestEnd - 24)) {
            $filenameLength = $this->readUint($pos, 4);
            $pos += 4 + $filenameLength;

            // skip filesize and timestamp
            $pos += 2*4;

            $compressedSizes += $this->readUint($pos, 4);
            // skip compressed file size, crc32 checksum and file flags
            $pos += 3*4;

            $metadataLength = $this->readUint($pos, 4);
            $pos += 4 + $metadataLength;

            $numFiles--;
        }

        if ($numFiles !== 0) {
            throw new \LogicException('All files were not processed, something must have gone wrong');
        }

        return $manifestEnd + $compressedSizes;
    }
}

$script = <<<PHP
namespace Composer\Json;
use Phar;
if (!function_exists('Composer\Json\json_decode')) {
    function json_decode(\$json, \$associative = null, \$depth = 512, \$flags = 0)
    {
        if (null === (\$result = \json_decode(\$json, \$associative, \$depth, \$flags))) {
            \$minify = \preg_replace('#(([},{\[\]]|false\b|true\b|null\b|\d\b|\w")//.*)|(\s//.*)|(^//.*)#', '$2', \$json);
            \$minify = \preg_replace('#\s*(?!<\")/\*[^*]+\*/(?!\")\s*#', '', \$minify);

            return \json_decode(\$minify, \$associative, \$depth, \$flags);
        }

        return \$result;
    }
}
PHP;

if (!isset($argv[1])) {
    echo <<<HELP
Example Usage:
    $ phar-patcher pathto/composer.phar
HELP;
    exit(0);
}

if (!file_exists($argv[1])) {
    fwrite(STDERR, "The file {$argv[1]} is not exists\n");
    exit(1);
}

$patcher = new PharPatcher($argv[1]);
$patcher->injectScript($script);
$patcher->save($argv[1]);
